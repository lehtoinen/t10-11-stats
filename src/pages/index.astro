---
import { range } from "ramda";
import { getTeam } from "../api/torneoPal";
import Layout from "../layouts/Layout.astro";
import mergeObjectsInArraysByProperty from "../utils/mergeObjectsInArraysByProperty";

const teams = [
  { name: "T12", id: "184530", categoryId: "T125" },
  { name: "T13/val", id: "35127914", categoryId: "T135" },
  { name: "T13/mus", id: "157309", categoryId: "T134" },
] as const;

type TeamId = (typeof teams)[number]["id"];

type Stats = {
  matches: number;
  goals: number;
};

type WithStats = {
  [key in TeamId]?: Stats;
};

type Player = {
  id: string;
  name: string;
  birthyear: number;
} & WithStats;

type TeamDetails = {
  id: string;
  players: Player[];
};

const teamResponses = await Promise.all(
  teams.map(({ id, categoryId }) => getTeam(id, categoryId))
);

const teamDetails: TeamDetails[] = teamResponses.map(({ team }) => ({
  id: team.team_id,
  players: team.players
    .filter(({ matches }) => parseInt(matches, 10) > 0)
    .sort((a, b) => b.last_name > a.last_name ? -1 : 1)
    .sort((a, b) => b.birthyear > a.birthyear ? -1 : 1)
    .map((player) => ({
      id: player.player_id,
      name: `${player.first_name} ${player.last_name}`,
      birthyear: parseInt(player.birthyear, 10),
      [team.team_id]: {
        matches: parseInt(player.matches, 10),
        goals: parseInt(player.goals, 10),
      },
    })),
}));

const players = mergeObjectsInArraysByProperty(
  teamDetails.map(({ players }) => players),
  "id"
)
  .map((player) => ({
    ...player,
    totals: teams.reduce(
      (total, { id: teamId }) => ({
        matches: total.matches + (player[teamId]?.matches ?? 0),
        goals: total.goals + (player[teamId]?.goals ?? 0),
      }),
      { matches: 0, goals: 0 }
    ),
  }))
  .sort((a, b) =>
    a.totals.matches !== b.totals.matches
      ? b.totals.matches - a.totals.matches
      : b.totals.goals - a.totals.goals
  );
---

<Layout title="T10-11 tilastot">
  <main>
    <table>
      <thead>
        <tr>
          <td></td>
          <th colspan="2">Yhteensä</th>
          {
            teams.map(({ name }) => (
              <>
                <th colspan="2">{name}</th>
              </>
            ))
          }
        </tr>
        <tr>
          <td/>
          {range(0, 4).map(() => <td>ottelut</td><td>maalit</td>)}
        </tr>
      </thead>
      <tbody>
        {
          players.map((player) => (
            <tr>
              <td>{player.name} ({player.birthyear})</td>
              <td>{player.totals.matches}</td>
              <td>{player.totals.goals}</td>
              {teams.map(({ id: teamId }) => {
                const stats = player?.[teamId];
                if (!stats) {
                  return <td /><td />;
                }

                return (
                    <td>{stats.matches}</td>
                    <td>{stats.goals > 0 ? stats.goals : ""}</td>
                );
              })}
            </tr>
          ))
        }
      </tbody>
    </table>
    <br />
    Yhteensä: {players.length} pelaajaa
  </main>
</Layout>

<style>
  th,
  td {
    padding: 0.2rem 1rem;
  }
  td:not(:first-child) {
    text-align: center;
  }

  td:nth-child(2n+4) {
    border-left: 1px solid lightgray;
  }

  tbody td:empty::before {
    content: "-";
    color: darkgray;
  }
</style>
